import { NextRequest, NextResponse } from "next/server";
import Stripe from "stripe";
import { prisma } from "@/lib/prisma";

// Initialisation de l'instance Stripe avec la cl√© secr√®te
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string, {
  apiVersion: "2023-10-16" as Stripe.LatestApiVersion, // ‚úÖ Correction de TypeScript
});

export async function POST(req: NextRequest) {
  try {
    // Chargement de la cl√© secr√®te du webhook Stripe
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
    if (!webhookSecret) {
      throw new Error("‚ö†Ô∏è ERREUR : STRIPE_WEBHOOK_SECRET est manquant dans le .env !");
    }

    // R√©cup√©ration du corps de la requ√™te et de la signature
    const body = await req.text();
    const signature = req.headers.get("stripe-signature");

    if (!signature) {
      console.error("‚ùå La signature du webhook est absente.");
      return NextResponse.json({ error: "Webhook signature missing" }, { status: 400 });
    }

    // V√©rification de l'int√©grit√© du webhook Stripe
    let event: Stripe.Event;
    try {
      event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
    } catch (err: any) {
      console.error(`üö® √âchec de la v√©rification de la signature du webhook : ${err.message}`);
      return NextResponse.json({ error: err.message }, { status: 400 });
    }

    const { data, type: eventType } = event;
    console.log(`‚úÖ Webhook Stripe re√ßu : ${eventType}`);

    switch (eventType) {
        // üí≥ Paiement r√©ussi via Checkout
      case "checkout.session.completed": {
        console.log("üîî √âv√©nement : checkout.session.completed");
        const session = data.object as Stripe.Checkout.Session;

        if (!session.customer) {
          throw new Error("‚ùå Customer ID manquant dans la session");
        }

        const customerId = session.customer as string;
        console.log(`üîç Customer ID : ${customerId}`);

        // R√©cup√©ration des infos du client depuis Stripe
        const customer = await stripe.customers.retrieve(customerId);

        if ("deleted" in customer) {
          throw new Error("‚ùå Le client a √©t√© supprim√©");
        }
        if (!customer.email) {
          throw new Error("‚ùå Aucun email client fourni");
        }

        console.log(`üì© Customer email : ${customer.email}`);

        // V√©rification si l'utilisateur existe d√©j√†
        let user = await prisma.user.findUnique({ where: { email: customer.email } });

        if (user && user.isActive) {
          throw new Error("‚ùå Un abonnement est d√©j√† actif pour cet utilisateur.");
        }

        // Cr√©ation ou mise √† jour de l'utilisateur
        if (!user) {
          user = await prisma.user.create({
            data: {
              email: customer.email,
              stripeCustomerId: customerId,
              subscriptionID: session.subscription as string,
              isActive: true,
            },
          });
          console.log(`‚úÖ Nouvel utilisateur cr√©√© : ${JSON.stringify(user)}`);
        } else {
          user = await prisma.user.update({
            where: { email: customer.email },
            data: {
              stripeCustomerId: customerId,
              subscriptionID: session.subscription as string,
              isActive: true,
            },
          });
          console.log(`üîÑ Utilisateur mis √† jour : ${JSON.stringify(user)}`);
        }
        break;
      }

        // ‚ùå Paiement √©chou√©
      case "invoice.payment_failed": {
        console.log("‚ö†Ô∏è Paiement √©chou√© d√©tect√© !");
        const invoice = data.object as Stripe.Invoice;
        if (!invoice.customer) {
          throw new Error("‚ùå Customer ID introuvable dans l'√©v√©nement.");
        }

        const customerId = invoice.customer as string;
        const user = await prisma.user.findUnique({
          where: { stripeCustomerId: customerId },
        });

        if (user) {
          console.log(`üö® L'utilisateur ${user.email} a un paiement √©chou√©.`);
          // ‚ûú Ici, on peut envoyer un email pour demander un nouveau paiement.
        }
        break;
      }

        // üö´ Abonnement annul√©
      case "customer.subscription.deleted": {
        console.log("üîî √âv√©nement : customer.subscription.deleted");
        const subscription = data.object as Stripe.Subscription;

        if (!subscription.customer) {
          throw new Error("‚ùå Subscription ID introuvable.");
        }

        const customerId = subscription.customer as string;
        const user = await prisma.user.findUnique({
          where: { stripeCustomerId: customerId },
        });

        if (!user) {
          console.error(`‚ö†Ô∏è Utilisateur introuvable pour le client ID : ${customerId}`);
          return NextResponse.json({}, { status: 200 });
        }

        await prisma.user.update({
          where: { id: user.id },
          data: {
            isActive: false,
            subscriptionID: null,
          },
        });

        console.log(`‚ùå Abonnement annul√© pour l'utilisateur : ${user.email}`);
        break;
      }

      default:
        console.warn(`‚ö†Ô∏è Webhook non g√©r√© : ${eventType}`);
        return NextResponse.json({}, { status: 200 });
    }

    return NextResponse.json({}, { status: 200 });
  } catch (error: any) {
    console.error(`üî• Erreur Stripe Webhook : ${error.message}`);
    return NextResponse.json({ error: error.message }, { status: 400 });
  }
}