import { NextRequest, NextResponse } from "next/server";
import Stripe from "stripe";
import { prisma } from "@/lib/prisma";

// Initialisation de Stripe
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string, {
  apiVersion: "2023-10-16" as Stripe.LatestApiVersion,
});

export async function POST(req: NextRequest) {
  try {
    // V√©rifier que la cl√© webhook est bien d√©finie
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
    if (!webhookSecret) {
      throw new Error("‚ö†Ô∏è ERREUR : STRIPE_WEBHOOK_SECRET est manquant dans le .env !");
    }

    // Lire le corps et r√©cup√©rer la signature
    const body = await req.text();
    const signature = req.headers.get("stripe-signature");

    if (!signature) {
      return NextResponse.json({ error: "‚ùå Signature Stripe absente." }, { status: 400 });
    }

    // V√©rifier la validit√© du webhook Stripe
    let event: Stripe.Event;
    try {
      event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
    } catch (err: any) {
      console.error(`üö® √âchec v√©rification webhook : ${err.message}`);
      return NextResponse.json({ error: err.message }, { status: 400 });
    }

    const { type, data } = event;
    console.log(`‚úÖ Webhook Stripe re√ßu : ${type}`);

    switch (type) {
      case "checkout.session.completed": {
        console.log("üîî Paiement r√©ussi via Checkout");
        const session = data.object as Stripe.Checkout.Session;

        // R√©cup√©rer l'email et l'ID du client
        const customerId = session.customer as string | null;
        const customerEmail = session.customer_email || session.customer_details?.email || null;

        if (!customerEmail) {
          console.error("‚ùå Impossible de r√©cup√©rer l'email du client.");
          return NextResponse.json({ error: "Aucun email trouv√©." }, { status: 400 });
        }

        console.log(`üì© Email client : ${customerEmail}`);
        console.log(`üîç Customer ID : ${customerId || "N/A"}`);

        let user = await prisma.user.findUnique({ where: { email: customerEmail } });

        if (!user) {
          console.log("üÜï Cr√©ation d'un nouvel utilisateur.");
          user = await prisma.user.create({
            data: {
              email: customerEmail,
              stripeCustomerId: customerId || null,
              isActive: true,
            },
          });
        } else {
          console.log("üîÑ Mise √† jour de l'utilisateur existant.");
          await prisma.user.update({
            where: { email: customerEmail },
            data: { stripeCustomerId: customerId || null, isActive: true },
          });
        }

        return NextResponse.json({ success: true });
      }

      case "customer.subscription.deleted": {
        console.log("üîî Abonnement annul√©");
        const subscription = data.object as Stripe.Subscription;
        const customerId = subscription.customer as string;

        const user = await prisma.user.findUnique({
          where: { stripeCustomerId: customerId },
        });

        if (user) {
          await prisma.user.update({
            where: { id: user.id },
            data: { isActive: false, subscriptionID: null },
          });
          console.log(`‚ùå Acc√®s retir√© pour ${user.email}`);
        }
        return NextResponse.json({ success: true });
      }

      case "invoice.payment_failed": {
        console.log("‚ö†Ô∏è Paiement √©chou√© d√©tect√© !");
        const invoice = data.object as Stripe.Invoice;
        const customerId = invoice.customer as string;

        const user = await prisma.user.findUnique({
          where: { stripeCustomerId: customerId },
        });

        if (user) {
          console.warn(`‚ö†Ô∏è Paiement √©chou√© pour ${user.email}`);
        }
        return NextResponse.json({ success: true });
      }

      default:
        console.warn(`‚ö†Ô∏è Webhook non g√©r√© : ${type}`);
        return NextResponse.json({}, { status: 200 });
    }
  } catch (error: any) {
    console.error(`üî• Erreur Webhook : ${error.message}`);
    return NextResponse.json({ error: error.message }, { status: 400 });
  }
}